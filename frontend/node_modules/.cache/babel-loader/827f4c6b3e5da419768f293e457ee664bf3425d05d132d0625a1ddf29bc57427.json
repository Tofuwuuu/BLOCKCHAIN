{"ast":null,"code":"import axios from 'axios';\n\n// API base configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Types for API responses\n\n// API endpoints\nexport const apiService = {\n  // Dashboard\n  getDashboardStats: () => api.get('/api/stats').then(response => response.data),\n  // Alternative endpoint if /api/stats doesn't exist\n  getChain: () => api.get('/chain').then(response => response.data),\n  // Auth\n  login: credentials => api.post('/api/auth/login', credentials).then(response => response.data),\n  logout: () => api.post('/api/auth/logout').then(response => response.data),\n  getCurrentUser: () => api.get('/api/auth/me').then(response => response.data),\n  // Orders\n  getOrders: () => api.get('/api/orders').then(response => response.data),\n  getOrder: id => api.get(`/api/orders/${id}`).then(response => response.data),\n  // Suppliers\n  getSuppliers: () => api.get('/api/suppliers').then(response => response.data),\n  // Inventory\n  getInventory: () => api.get('/api/inventory').then(response => response.data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","apiService","getDashboardStats","get","then","data","getChain","login","credentials","post","logout","getCurrentUser","getOrders","getOrder","id","getSuppliers","getInventory"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\n\r\n// API base configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance with default config\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Types for API responses\r\nexport interface DashboardStats {\r\n  pending_orders: number;\r\n  approved_orders: number;\r\n  low_inventory: number;\r\n  recent_orders: RecentOrder[];\r\n}\r\n\r\nexport interface RecentOrder {\r\n  id: number;\r\n  po_number: string;\r\n  supplier: {\r\n    name: string;\r\n  };\r\n  date_created: string;\r\n  status: string;\r\n  total_amount: number;\r\n}\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  full_name: string;\r\n  position: string;\r\n  department: string;\r\n  is_admin: boolean;\r\n}\r\n\r\n// API endpoints\r\nexport const apiService = {\r\n  // Dashboard\r\n  getDashboardStats: (): Promise<DashboardStats> => \r\n    api.get('/api/stats').then(response => response.data),\r\n  \r\n  // Alternative endpoint if /api/stats doesn't exist\r\n  getChain: (): Promise<DashboardStats> => \r\n    api.get('/chain').then(response => response.data),\r\n\r\n  // Auth\r\n  login: (credentials: { username: string; password: string }) =>\r\n    api.post('/api/auth/login', credentials).then(response => response.data),\r\n  \r\n  logout: () =>\r\n    api.post('/api/auth/logout').then(response => response.data),\r\n  \r\n  getCurrentUser: (): Promise<User> =>\r\n    api.get('/api/auth/me').then(response => response.data),\r\n\r\n  // Orders\r\n  getOrders: () =>\r\n    api.get('/api/orders').then(response => response.data),\r\n  \r\n  getOrder: (id: number) =>\r\n    api.get(`/api/orders/${id}`).then(response => response.data),\r\n\r\n  // Suppliers\r\n  getSuppliers: () =>\r\n    api.get('/api/suppliers').then(response => response.data),\r\n\r\n  // Inventory\r\n  getInventory: () =>\r\n    api.get('/api/inventory').then(response => response.data),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAwC,OAAO;;AAE3D;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,GAAkB,GAAGL,KAAK,CAACM,MAAM,CAAC;EACtCC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAuB,IAAKA,QAAQ,EACpCH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;;AA4BA;AACA,OAAO,MAAMU,UAAU,GAAG;EACxB;EACAC,iBAAiB,EAAEA,CAAA,KACjBxB,GAAG,CAACyB,GAAG,CAAC,YAAY,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAEvD;EACAC,QAAQ,EAAEA,CAAA,KACR5B,GAAG,CAACyB,GAAG,CAAC,QAAQ,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAEnD;EACAE,KAAK,EAAGC,WAAmD,IACzD9B,GAAG,CAAC+B,IAAI,CAAC,iBAAiB,EAAED,WAAW,CAAC,CAACJ,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAE1EK,MAAM,EAAEA,CAAA,KACNhC,GAAG,CAAC+B,IAAI,CAAC,kBAAkB,CAAC,CAACL,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAE9DM,cAAc,EAAEA,CAAA,KACdjC,GAAG,CAACyB,GAAG,CAAC,cAAc,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAEzD;EACAO,SAAS,EAAEA,CAAA,KACTlC,GAAG,CAACyB,GAAG,CAAC,aAAa,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAExDQ,QAAQ,EAAGC,EAAU,IACnBpC,GAAG,CAACyB,GAAG,CAAC,eAAeW,EAAE,EAAE,CAAC,CAACV,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAE9D;EACAU,YAAY,EAAEA,CAAA,KACZrC,GAAG,CAACyB,GAAG,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAAC;EAE3D;EACAW,YAAY,EAAEA,CAAA,KACZtC,GAAG,CAACyB,GAAG,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACW,IAAI;AAC5D,CAAC;AAED,eAAe3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}