{"ast":null,"code":"/**\r\n * Utility function to hide any \"0\" counts in navigation elements\r\n * This function finds and hides any elements that contain only \"0\" as text\r\n */\nexport const hideZeroCounts = () => {\n  // Find all navigation items\n  const navItems = document.querySelectorAll('.nav-item-custom, .navbar-nav, .navbar');\n  navItems.forEach(item => {\n    // Find any spans, badges, divs, or other elements that contain \"0\"\n    const zeroElements = item.querySelectorAll('span, .badge, div, a, button');\n    zeroElements.forEach(element => {\n      var _element$textContent;\n      const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n      if (text === '0') {\n        element.style.display = 'none';\n      }\n    });\n  });\n\n  // Also check for any elements with data-count=\"0\"\n  const zeroCountElements = document.querySelectorAll('[data-count=\"0\"]');\n  zeroCountElements.forEach(element => {\n    element.style.display = 'none';\n  });\n\n  // Check for any notification badges with \"0\"\n  const notificationBadges = document.querySelectorAll('.notification-badge, .badge');\n  notificationBadges.forEach(badge => {\n    var _badge$textContent;\n    const text = (_badge$textContent = badge.textContent) === null || _badge$textContent === void 0 ? void 0 : _badge$textContent.trim();\n    if (text === '0') {\n      badge.style.display = 'none';\n    }\n  });\n\n  // Check for any elements with class names that suggest they contain counts\n  const countElements = document.querySelectorAll('.count, .notification-count, .badge-count');\n  countElements.forEach(element => {\n    var _element$textContent2;\n    const text = (_element$textContent2 = element.textContent) === null || _element$textContent2 === void 0 ? void 0 : _element$textContent2.trim();\n    if (text === '0') {\n      element.style.display = 'none';\n    }\n  });\n};\n\n/**\r\n * Set up a mutation observer to continuously hide \"0\" counts\r\n * This ensures that dynamically added elements are also hidden\r\n */\nexport const setupZeroCountObserver = () => {\n  const observer = new MutationObserver(() => {\n    hideZeroCounts();\n  });\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n\n  // Return cleanup function\n  return () => observer.disconnect();\n};\n\n/**\r\n * Initialize the zero count hiding functionality\r\n * This should be called when the app starts\r\n */\nexport const initZeroCountHiding = () => {\n  // Hide counts immediately\n  hideZeroCounts();\n\n  // Set up observer for dynamic content\n  const cleanup = setupZeroCountObserver();\n\n  // Also hide counts after a short delay to catch any late-rendered elements\n  const timeoutId = setTimeout(hideZeroCounts, 100);\n\n  // Return cleanup function\n  return () => {\n    cleanup();\n    clearTimeout(timeoutId);\n  };\n};","map":{"version":3,"names":["hideZeroCounts","navItems","document","querySelectorAll","forEach","item","zeroElements","element","_element$textContent","text","textContent","trim","style","display","zeroCountElements","notificationBadges","badge","_badge$textContent","countElements","_element$textContent2","setupZeroCountObserver","observer","MutationObserver","observe","body","childList","subtree","disconnect","initZeroCountHiding","cleanup","timeoutId","setTimeout","clearTimeout"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/utils/index.ts"],"sourcesContent":["/**\r\n * Utility function to hide any \"0\" counts in navigation elements\r\n * This function finds and hides any elements that contain only \"0\" as text\r\n */\r\nexport const hideZeroCounts = (): void => {\r\n  // Find all navigation items\r\n  const navItems = document.querySelectorAll('.nav-item-custom, .navbar-nav, .navbar');\r\n  \r\n  navItems.forEach((item) => {\r\n    // Find any spans, badges, divs, or other elements that contain \"0\"\r\n    const zeroElements = item.querySelectorAll('span, .badge, div, a, button');\r\n    \r\n    zeroElements.forEach((element) => {\r\n      const text = element.textContent?.trim();\r\n      if (text === '0') {\r\n        (element as HTMLElement).style.display = 'none';\r\n      }\r\n    });\r\n  });\r\n\r\n  // Also check for any elements with data-count=\"0\"\r\n  const zeroCountElements = document.querySelectorAll('[data-count=\"0\"]');\r\n  zeroCountElements.forEach((element) => {\r\n    (element as HTMLElement).style.display = 'none';\r\n  });\r\n\r\n  // Check for any notification badges with \"0\"\r\n  const notificationBadges = document.querySelectorAll('.notification-badge, .badge');\r\n  notificationBadges.forEach((badge) => {\r\n    const text = badge.textContent?.trim();\r\n    if (text === '0') {\r\n      (badge as HTMLElement).style.display = 'none';\r\n    }\r\n  });\r\n\r\n  // Check for any elements with class names that suggest they contain counts\r\n  const countElements = document.querySelectorAll('.count, .notification-count, .badge-count');\r\n  countElements.forEach((element) => {\r\n    const text = element.textContent?.trim();\r\n    if (text === '0') {\r\n      (element as HTMLElement).style.display = 'none';\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set up a mutation observer to continuously hide \"0\" counts\r\n * This ensures that dynamically added elements are also hidden\r\n */\r\nexport const setupZeroCountObserver = (): (() => void) => {\r\n  const observer = new MutationObserver(() => {\r\n    hideZeroCounts();\r\n  });\r\n\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true\r\n  });\r\n\r\n  // Return cleanup function\r\n  return () => observer.disconnect();\r\n};\r\n\r\n/**\r\n * Initialize the zero count hiding functionality\r\n * This should be called when the app starts\r\n */\r\nexport const initZeroCountHiding = (): (() => void) => {\r\n  // Hide counts immediately\r\n  hideZeroCounts();\r\n  \r\n  // Set up observer for dynamic content\r\n  const cleanup = setupZeroCountObserver();\r\n  \r\n  // Also hide counts after a short delay to catch any late-rendered elements\r\n  const timeoutId = setTimeout(hideZeroCounts, 100);\r\n  \r\n  // Return cleanup function\r\n  return () => {\r\n    cleanup();\r\n    clearTimeout(timeoutId);\r\n  };\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAY;EACxC;EACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,wCAAwC,CAAC;EAEpFF,QAAQ,CAACG,OAAO,CAAEC,IAAI,IAAK;IACzB;IACA,MAAMC,YAAY,GAAGD,IAAI,CAACF,gBAAgB,CAAC,8BAA8B,CAAC;IAE1EG,YAAY,CAACF,OAAO,CAAEG,OAAO,IAAK;MAAA,IAAAC,oBAAA;MAChC,MAAMC,IAAI,IAAAD,oBAAA,GAAGD,OAAO,CAACG,WAAW,cAAAF,oBAAA,uBAAnBA,oBAAA,CAAqBG,IAAI,CAAC,CAAC;MACxC,IAAIF,IAAI,KAAK,GAAG,EAAE;QACfF,OAAO,CAAiBK,KAAK,CAACC,OAAO,GAAG,MAAM;MACjD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,iBAAiB,GAAGZ,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,CAAC;EACvEW,iBAAiB,CAACV,OAAO,CAAEG,OAAO,IAAK;IACpCA,OAAO,CAAiBK,KAAK,CAACC,OAAO,GAAG,MAAM;EACjD,CAAC,CAAC;;EAEF;EACA,MAAME,kBAAkB,GAAGb,QAAQ,CAACC,gBAAgB,CAAC,6BAA6B,CAAC;EACnFY,kBAAkB,CAACX,OAAO,CAAEY,KAAK,IAAK;IAAA,IAAAC,kBAAA;IACpC,MAAMR,IAAI,IAAAQ,kBAAA,GAAGD,KAAK,CAACN,WAAW,cAAAO,kBAAA,uBAAjBA,kBAAA,CAAmBN,IAAI,CAAC,CAAC;IACtC,IAAIF,IAAI,KAAK,GAAG,EAAE;MACfO,KAAK,CAAiBJ,KAAK,CAACC,OAAO,GAAG,MAAM;IAC/C;EACF,CAAC,CAAC;;EAEF;EACA,MAAMK,aAAa,GAAGhB,QAAQ,CAACC,gBAAgB,CAAC,2CAA2C,CAAC;EAC5Fe,aAAa,CAACd,OAAO,CAAEG,OAAO,IAAK;IAAA,IAAAY,qBAAA;IACjC,MAAMV,IAAI,IAAAU,qBAAA,GAAGZ,OAAO,CAACG,WAAW,cAAAS,qBAAA,uBAAnBA,qBAAA,CAAqBR,IAAI,CAAC,CAAC;IACxC,IAAIF,IAAI,KAAK,GAAG,EAAE;MACfF,OAAO,CAAiBK,KAAK,CAACC,OAAO,GAAG,MAAM;IACjD;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,sBAAsB,GAAGA,CAAA,KAAoB;EACxD,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAAC,MAAM;IAC1CtB,cAAc,CAAC,CAAC;EAClB,CAAC,CAAC;EAEFqB,QAAQ,CAACE,OAAO,CAACrB,QAAQ,CAACsB,IAAI,EAAE;IAC9BC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACA,OAAO,MAAML,QAAQ,CAACM,UAAU,CAAC,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAoB;EACrD;EACA5B,cAAc,CAAC,CAAC;;EAEhB;EACA,MAAM6B,OAAO,GAAGT,sBAAsB,CAAC,CAAC;;EAExC;EACA,MAAMU,SAAS,GAAGC,UAAU,CAAC/B,cAAc,EAAE,GAAG,CAAC;;EAEjD;EACA,OAAO,MAAM;IACX6B,OAAO,CAAC,CAAC;IACTG,YAAY,CAACF,SAAS,CAAC;EACzB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}