{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{apiService}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Check if user is authenticated on app load\nuseEffect(()=>{const checkAuth=async()=>{try{console.log('🔍 Checking authentication status...');const token=localStorage.getItem('authToken');console.log('🔑 Token in localStorage:',token?'Present':'None');if(token){try{console.log('📡 Calling getCurrentUser API...');// Try to get current user from API\nconst userData=await apiService.getCurrentUser();console.log('✅ getCurrentUser API response:',userData);setUser(userData);console.log('👤 User state set from API');}catch(error){console.log('❌ Auth API failed, clearing token...',error);localStorage.removeItem('authToken');setUser(null);}}else{// No token, user is not authenticated\nconsole.log('🚫 No token found, user not authenticated');setUser(null);}}catch(error){console.error('❌ Auth check failed:',error);localStorage.removeItem('authToken');setUser(null);}finally{console.log('🏁 Authentication check completed');setLoading(false);}};checkAuth();},[]);const login=async(username,password)=>{try{console.log('🔐 Attempting login for:',username);// Call the backend login endpoint\nconst response=await apiService.login({username,password});console.log('✅ Login API response:',response);// Store the token\nlocalStorage.setItem('authToken',response.token);console.log('💾 Token stored in localStorage');// Set the user data\nsetUser(response.user);console.log('👤 User state updated:',response.user);console.log('🎉 Login successful:',response.user.username);}catch(error){console.error('❌ Login failed:',error);throw error;// Re-throw to let the component handle the error\n}};const logout=async()=>{try{// Call the backend logout endpoint\nawait apiService.logout();}catch(error){console.error('Logout error:',error);// Continue with logout even if API call fails\n}finally{// Always clear local storage and user state\nlocalStorage.removeItem('authToken');setUser(null);console.log('Logout completed');}};const value={user,loading,login,logout,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuth","console","log","token","localStorage","getItem","userData","getCurrentUser","error","removeItem","login","username","password","response","setItem","logout","value","isAuthenticated","Provider","useAuth","context","Error"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, apiService } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        console.log('🔍 Checking authentication status...');\r\n        const token = localStorage.getItem('authToken');\r\n        console.log('🔑 Token in localStorage:', token ? 'Present' : 'None');\r\n        \r\n        if (token) {\r\n          try {\r\n            console.log('📡 Calling getCurrentUser API...');\r\n            // Try to get current user from API\r\n            const userData = await apiService.getCurrentUser();\r\n            console.log('✅ getCurrentUser API response:', userData);\r\n            setUser(userData);\r\n            console.log('👤 User state set from API');\r\n          } catch (error) {\r\n            console.log('❌ Auth API failed, clearing token...', error);\r\n            localStorage.removeItem('authToken');\r\n            setUser(null);\r\n          }\r\n        } else {\r\n          // No token, user is not authenticated\r\n          console.log('🚫 No token found, user not authenticated');\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Auth check failed:', error);\r\n        localStorage.removeItem('authToken');\r\n        setUser(null);\r\n      } finally {\r\n        console.log('🏁 Authentication check completed');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      console.log('🔐 Attempting login for:', username);\r\n      \r\n      // Call the backend login endpoint\r\n      const response = await apiService.login({ username, password });\r\n      console.log('✅ Login API response:', response);\r\n      \r\n      // Store the token\r\n      localStorage.setItem('authToken', response.token);\r\n      console.log('💾 Token stored in localStorage');\r\n      \r\n      // Set the user data\r\n      setUser(response.user);\r\n      console.log('👤 User state updated:', response.user);\r\n      \r\n      console.log('🎉 Login successful:', response.user.username);\r\n    } catch (error) {\r\n      console.error('❌ Login failed:', error);\r\n      throw error; // Re-throw to let the component handle the error\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call the backend logout endpoint\r\n      await apiService.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Continue with logout even if API call fails\r\n    } finally {\r\n      // Always clear local storage and user state\r\n      localStorage.removeItem('authToken');\r\n      setUser(null);\r\n      console.log('Logout completed');\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CACxF,OAAeC,UAAU,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAUnD,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAA8BQ,SAAS,CAAC,CAMzE,MAAO,MAAM,CAAAC,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CACnD,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/CJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEC,KAAK,CAAG,SAAS,CAAG,MAAM,CAAC,CAEpE,GAAIA,KAAK,CAAE,CACT,GAAI,CACFF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAC/C;AACA,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAlB,UAAU,CAACmB,cAAc,CAAC,CAAC,CAClDN,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEI,QAAQ,CAAC,CACvDT,OAAO,CAACS,QAAQ,CAAC,CACjBL,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAC3C,CAAE,MAAOM,KAAK,CAAE,CACdP,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAEM,KAAK,CAAC,CAC1DJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC,CACpCZ,OAAO,CAAC,IAAI,CAAC,CACf,CACF,CAAC,IAAM,CACL;AACAI,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CACxDL,OAAO,CAAC,IAAI,CAAC,CACf,CACF,CAAE,MAAOW,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5CJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC,CACpCZ,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,OAAS,CACRI,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChDH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAU,KAAK,CAAG,KAAAA,CAAOC,QAAgB,CAAEC,QAAgB,GAAK,CAC1D,GAAI,CACFX,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAES,QAAQ,CAAC,CAEjD;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAzB,UAAU,CAACsB,KAAK,CAAC,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAC,CAC/DX,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEW,QAAQ,CAAC,CAE9C;AACAT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAED,QAAQ,CAACV,KAAK,CAAC,CACjDF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAE9C;AACAL,OAAO,CAACgB,QAAQ,CAACjB,IAAI,CAAC,CACtBK,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEW,QAAQ,CAACjB,IAAI,CAAC,CAEpDK,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEW,QAAQ,CAACjB,IAAI,CAACe,QAAQ,CAAC,CAC7D,CAAE,MAAOH,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,KAAM,CAAAA,KAAK,CAAE;AACf,CACF,CAAC,CAED,KAAM,CAAAO,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF;AACA,KAAM,CAAA3B,UAAU,CAAC2B,MAAM,CAAC,CAAC,CAC3B,CAAE,MAAOP,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC;AACF,CAAC,OAAS,CACR;AACAJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC,CACpCZ,OAAO,CAAC,IAAI,CAAC,CACbI,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACjC,CACF,CAAC,CAED,KAAM,CAAAc,KAAsB,CAAG,CAC7BpB,IAAI,CACJE,OAAO,CACPY,KAAK,CACLK,MAAM,CACNE,eAAe,CAAE,CAAC,CAACrB,IACrB,CAAC,CAED,mBACEN,IAAA,CAACC,WAAW,CAAC2B,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAArB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAwB,OAAO,CAAGA,CAAA,GAAuB,CAC5C,KAAM,CAAAC,OAAO,CAAGnC,UAAU,CAACM,WAAW,CAAC,CACvC,GAAI6B,OAAO,GAAK5B,SAAS,CAAE,CACzB,KAAM,IAAI,CAAA6B,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}