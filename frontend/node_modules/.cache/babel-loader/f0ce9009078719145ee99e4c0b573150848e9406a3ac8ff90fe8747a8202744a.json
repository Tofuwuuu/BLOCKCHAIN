{"ast":null,"code":"var _jsxFileName = \"F:\\\\Project\\\\BLOCKCHAIN\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { apiService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          try {\n            // Try to get current user from API\n            const userData = await apiService.getCurrentUser();\n            setUser(userData);\n          } catch (error) {\n            console.log('Auth API failed, clearing token...');\n            localStorage.removeItem('authToken');\n            setUser(null);\n          }\n        } else {\n          // No token, user is not authenticated\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('authToken');\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Call the backend login endpoint\n      const response = await apiService.login({\n        username,\n        password\n      });\n\n      // Store the token\n      localStorage.setItem('authToken', response.token);\n\n      // Set the user data\n      setUser(response.user);\n      console.log('Login successful:', response.user.username);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error; // Re-throw to let the component handle the error\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call the backend logout endpoint\n      await apiService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Continue with logout even if API call fails\n    } finally {\n      // Always clear local storage and user state\n      localStorage.removeItem('authToken');\n      setUser(null);\n      console.log('Logout completed');\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","userData","getCurrentUser","error","console","log","removeItem","login","username","password","response","setItem","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, apiService } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          try {\r\n            // Try to get current user from API\r\n            const userData = await apiService.getCurrentUser();\r\n            setUser(userData);\r\n          } catch (error) {\r\n            console.log('Auth API failed, clearing token...');\r\n            localStorage.removeItem('authToken');\r\n            setUser(null);\r\n          }\r\n        } else {\r\n          // No token, user is not authenticated\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check failed:', error);\r\n        localStorage.removeItem('authToken');\r\n        setUser(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      // Call the backend login endpoint\r\n      const response = await apiService.login({ username, password });\r\n      \r\n      // Store the token\r\n      localStorage.setItem('authToken', response.token);\r\n      \r\n      // Set the user data\r\n      setUser(response.user);\r\n      \r\n      console.log('Login successful:', response.user.username);\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error; // Re-throw to let the component handle the error\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call the backend logout endpoint\r\n      await apiService.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Continue with logout even if API call fails\r\n    } finally {\r\n      // Always clear local storage and user state\r\n      localStorage.removeItem('authToken');\r\n      setUser(null);\r\n      console.log('Logout completed');\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}