{"ast":null,"code":"import axios from 'axios';\n\n// API base configuration\n// Use proxy in development (package.json \"proxy\"), otherwise honor env var\nconst isDev = process.env.NODE_ENV !== 'production';\nconst API_BASE_URL = isDev ? 'http://localhost:3002' : process.env.REACT_APP_API_URL || 'https://your-api.example.com';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Request interceptor to add auth token or session cookie\napi.interceptors.request.use(config => {\n  // Check for auth token in localStorage\n  const token = localStorage.getItem('authToken');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Ensure headers object exists\n  if (!config.headers) {\n    config.headers = {};\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear auth token and redirect to login\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Standard API response interface\n\n// Helper method to handle API responses\nconst handleApiResponse = response => ({\n  ok: true,\n  data: response.data\n});\n\n// Helper method to handle API errors\nconst handleApiError = error => {\n  var _error$response2, _error$response2$data;\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An error occurred';\n  return {\n    ok: false,\n    error: errorMessage\n  };\n};\n\n// Helper methods with standardized response format\nexport const httpService = {\n  // GET request\n  get: async (url, config) => {\n    try {\n      const response = await api.get(url, config);\n      return handleApiResponse(response);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // POST request\n  post: async (url, data, config) => {\n    try {\n      const response = await api.post(url, data, config);\n      return handleApiResponse(response);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // PUT request\n  put: async (url, data, config) => {\n    try {\n      const response = await api.put(url, data, config);\n      return handleApiResponse(response);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // DELETE request\n  delete: async (url, config) => {\n    try {\n      const response = await api.delete(url, config);\n      return handleApiResponse(response);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  // PATCH request\n  patch: async (url, data, config) => {\n    try {\n      const response = await api.patch(url, data, config);\n      return handleApiResponse(response);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n// ===== TYPES =====\n\n// Blockchain Types\n\n// Procurement Types\n\n// Form Types\n\n// ===== SETTINGS TYPES =====\n\n// ===== API SERVICE =====\n\nexport const apiService = {\n  // ===== AUTHENTICATION =====\n  login: async credentials => {\n    try {\n      const response = await api.post('/api/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      const response = await api.post('/api/auth/logout');\n      return response.data;\n    } catch (error) {\n      console.error('Logout API error:', error);\n      throw error;\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/api/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      throw error;\n    }\n  },\n  // ===== DASHBOARD =====\n  getDashboardStats: async () => {\n    const response = await api.get('/api/stats');\n    return response.data;\n  },\n  getChain: async () => {\n    const response = await api.get('/chain');\n    return response.data;\n  },\n  // ===== BLOCKCHAIN =====\n  getBlockchain: async () => {\n    const response = await api.get('/chain');\n    return response.data;\n  },\n  getBlock: async index => {\n    const response = await api.get(`/chain/block/${index}`);\n    return response.data;\n  },\n  createTransaction: async data => {\n    const response = await api.post('/transactions/new', data);\n    return response.data;\n  },\n  mineBlock: async () => {\n    const response = await api.get('/mine');\n    return response.data;\n  },\n  // ===== PEERS =====\n  getPeers: async () => {\n    const response = await api.get('/peers');\n    return response.data;\n  },\n  addPeer: async url => {\n    const response = await api.post('/add_peer', {\n      url\n    });\n    return response.data;\n  },\n  // ===== SUPPLIERS =====\n  getSuppliers: async () => {\n    const response = await api.get('/api/suppliers');\n    return response.data;\n  },\n  getSupplier: async id => {\n    const response = await api.get(`/api/suppliers/${id}`);\n    return response.data;\n  },\n  createSupplier: async data => {\n    const response = await api.post('/api/suppliers', data);\n    return response.data;\n  },\n  updateSupplier: async (id, data) => {\n    const response = await api.put(`/api/suppliers/${id}`, data);\n    return response.data;\n  },\n  deleteSupplier: async id => {\n    const response = await api.delete(`/api/suppliers/${id}`);\n    return response.data;\n  },\n  // ===== PURCHASE ORDERS =====\n  getOrders: async () => {\n    const response = await api.get('/api/orders');\n    return response.data;\n  },\n  getOrder: async id => {\n    const response = await api.get(`/api/orders/${id}`);\n    return response.data;\n  },\n  createOrder: async data => {\n    const response = await api.post('/api/orders', data);\n    return response.data;\n  },\n  updateOrder: async (id, data) => {\n    const response = await api.put(`/api/orders/${id}`, data);\n    return response.data;\n  },\n  deleteOrder: async id => {\n    const response = await api.delete(`/api/orders/${id}`);\n    return response.data;\n  },\n  approveOrder: async id => {\n    const response = await api.post(`/api/orders/${id}/approve`);\n    return response.data;\n  },\n  // ===== INVENTORY =====\n  getInventory: async () => {\n    const response = await api.get('/api/inventory');\n    return response.data;\n  },\n  getInventoryItem: async id => {\n    const response = await api.get(`/api/inventory/${id}`);\n    return response.data;\n  },\n  adjustInventory: async data => {\n    const response = await api.post('/api/inventory/adjust', data);\n    return response.data;\n  },\n  // ===== PRODUCTS =====\n  getProducts: async () => {\n    const response = await api.get('/api/products');\n    return response.data;\n  },\n  getProduct: async id => {\n    const response = await api.get(`/api/products/${id}`);\n    return response.data;\n  },\n  createProduct: async data => {\n    const response = await api.post('/api/products', data);\n    return response.data;\n  },\n  updateProduct: async (id, data) => {\n    const response = await api.put(`/api/products/${id}`, data);\n    return response.data;\n  },\n  deleteProduct: async id => {\n    const response = await api.delete(`/api/products/${id}`);\n    return response.data;\n  },\n  // ===== USER MANAGEMENT =====\n  getUsers: async () => {\n    const response = await api.get('/api/users');\n    return response.data;\n  },\n  getUser: async id => {\n    const response = await api.get(`/api/users/${id}`);\n    return response.data;\n  },\n  createUser: async data => {\n    const response = await api.post('/api/users', data);\n    return response.data;\n  },\n  updateUser: async (id, data) => {\n    const response = await api.put(`/api/users/${id}`, data);\n    return response.data;\n  },\n  updateUserPassword: async (id, password) => {\n    const response = await api.put(`/api/users/${id}/password`, {\n      password\n    });\n    return response.data;\n  },\n  deleteUser: async id => {\n    const response = await api.delete(`/api/users/${id}`);\n    return response.data;\n  },\n  getRoles: async () => {\n    const response = await api.get('/api/roles');\n    return response.data;\n  },\n  // ===== SETTINGS =====\n  getSystemSettings: async () => {\n    const response = await api.get('/api/settings/system');\n    return response.data;\n  },\n  updateSystemSettings: async data => {\n    const response = await api.put('/api/settings/system', data);\n    return response.data;\n  },\n  getUserPreferences: async () => {\n    const response = await api.get('/api/settings/preferences');\n    return response.data;\n  },\n  updateUserPreferences: async data => {\n    const response = await api.put('/api/settings/preferences', data);\n    return response.data;\n  },\n  getSystemInfo: async () => {\n    const response = await api.get('/api/settings/system-info');\n    return response.data;\n  },\n  exportSystemData: async () => {\n    const response = await api.post('/api/settings/export');\n    return response.data;\n  },\n  importSystemData: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/api/settings/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","isDev","process","env","NODE_ENV","API_BASE_URL","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","handleApiResponse","ok","data","handleApiError","_error$response2","_error$response2$data","errorMessage","message","httpService","get","url","post","put","delete","patch","apiService","login","credentials","console","logout","getCurrentUser","getDashboardStats","getChain","getBlockchain","getBlock","index","createTransaction","mineBlock","getPeers","addPeer","getSuppliers","getSupplier","id","createSupplier","updateSupplier","deleteSupplier","getOrders","getOrder","createOrder","updateOrder","deleteOrder","approveOrder","getInventory","getInventoryItem","adjustInventory","getProducts","getProduct","createProduct","updateProduct","deleteProduct","getUsers","getUser","createUser","updateUser","updateUserPassword","password","deleteUser","getRoles","getSystemSettings","updateSystemSettings","getUserPreferences","updateUserPreferences","getSystemInfo","exportSystemData","importSystemData","file","formData","FormData","append"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse, AxiosError, AxiosRequestConfig } from 'axios';\r\n\r\n// API base configuration\r\n// Use proxy in development (package.json \"proxy\"), otherwise honor env var\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\nconst API_BASE_URL = isDev ? 'http://localhost:3002' : (process.env.REACT_APP_API_URL || 'https://your-api.example.com');\r\n\r\n// Create axios instance with default config\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// Request interceptor to add auth token or session cookie\r\napi.interceptors.request.use(\r\n  (config: AxiosRequestConfig) => {\r\n    // Check for auth token in localStorage\r\n    const token = localStorage.getItem('authToken');\r\n    \r\n    if (token && config.headers) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Ensure headers object exists\r\n    if (!config.headers) {\r\n      config.headers = {};\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error: AxiosError) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => response,\r\n  (error: AxiosError) => {\r\n    if (error.response?.status === 401) {\r\n      // Clear auth token and redirect to login\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Standard API response interface\r\nexport interface ApiResponse<T = any> {\r\n  ok: boolean;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\n// Helper method to handle API responses\r\nconst handleApiResponse = <T>(response: AxiosResponse<T>): ApiResponse<T> => ({\r\n  ok: true,\r\n  data: response.data,\r\n});\r\n\r\n// Helper method to handle API errors\r\nconst handleApiError = (error: AxiosError): ApiResponse => {\r\n  const errorMessage = (error.response?.data as any)?.message || error.message || 'An error occurred';\r\n  return {\r\n    ok: false,\r\n    error: errorMessage,\r\n  };\r\n};\r\n\r\n// Helper methods with standardized response format\r\nexport const httpService = {\r\n  // GET request\r\n  get: async <T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    try {\r\n      const response = await api.get<T>(url, config);\r\n      return handleApiResponse(response);\r\n    } catch (error) {\r\n      return handleApiError(error as AxiosError);\r\n    }\r\n  },\r\n\r\n  // POST request\r\n  post: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    try {\r\n      const response = await api.post<T>(url, data, config);\r\n      return handleApiResponse(response);\r\n    } catch (error) {\r\n      return handleApiError(error as AxiosError);\r\n    }\r\n  },\r\n\r\n  // PUT request\r\n  put: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    try {\r\n      const response = await api.put<T>(url, data, config);\r\n      return handleApiResponse(response);\r\n    } catch (error) {\r\n      return handleApiError(error as AxiosError);\r\n    }\r\n  },\r\n\r\n  // DELETE request\r\n  delete: async <T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    try {\r\n      const response = await api.delete<T>(url, config);\r\n      return handleApiResponse(response);\r\n    } catch (error) {\r\n      return handleApiError(error as AxiosError);\r\n    }\r\n  },\r\n\r\n  // PATCH request\r\n  patch: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    try {\r\n      const response = await api.patch<T>(url, data, config);\r\n      return handleApiResponse(response);\r\n    } catch (error) {\r\n      return handleApiError(error as AxiosError);\r\n    }\r\n  },\r\n};\r\n\r\n// ===== TYPES =====\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  full_name: string;\r\n  position: string;\r\n  department: string;\r\n  role: string;\r\n  is_admin: boolean;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface CreateUserData {\r\n  username: string;\r\n  password: string;\r\n  full_name: string;\r\n  position: string;\r\n  department: string;\r\n  role: string;\r\n}\r\n\r\nexport interface DashboardStats {\r\n  pending_orders: number;\r\n  approved_orders: number;\r\n  low_inventory: number;\r\n  recent_orders: RecentOrder[];\r\n}\r\n\r\nexport interface RecentOrder {\r\n  id: number;\r\n  po_number: string;\r\n  supplier: {\r\n    name: string;\r\n  };\r\n  date_created: string;\r\n  status: string;\r\n  total_amount: number;\r\n}\r\n\r\n// Blockchain Types\r\nexport interface Block {\r\n  index: number;\r\n  timestamp: string;\r\n  transactions: Transaction[];\r\n  nonce: number;\r\n  previous_hash: string;\r\n  hash: string;\r\n}\r\n\r\nexport interface Transaction {\r\n  sender: string;\r\n  recipient: string;\r\n  amount?: number;\r\n  action: string;\r\n  data?: any;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface Chain {\r\n  chain: Block[];\r\n  length: number;\r\n}\r\n\r\nexport interface Peer {\r\n  id: string;\r\n  url: string;\r\n  is_active: boolean;\r\n}\r\n\r\n// Procurement Types\r\nexport interface Supplier {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  province: string;\r\n  contact_person: string;\r\n  phone: string;\r\n  email?: string;\r\n  bir_tin: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface PurchaseOrder {\r\n  id: number;\r\n  po_number: string;\r\n  supplier_id: number;\r\n  supplier: Supplier;\r\n  delivery_address: string;\r\n  notes?: string;\r\n  status: 'Draft' | 'Pending' | 'Approved' | 'Completed' | 'Cancelled';\r\n  total_amount: number;\r\n  date_created: string;\r\n  date_updated: string;\r\n  items: OrderItem[];\r\n}\r\n\r\nexport interface OrderItem {\r\n  id: number;\r\n  product_id: number;\r\n  product: Product;\r\n  quantity: number;\r\n  unit_price: number;\r\n  total_price: number;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  unit: string;\r\n  unit_price: number;\r\n  category: string;\r\n  is_active: boolean;\r\n}\r\n\r\nexport interface Inventory {\r\n  id: number;\r\n  product_id: number;\r\n  product: Product;\r\n  quantity: number;\r\n  unit_price: number;\r\n  total_value: number;\r\n  last_updated: string;\r\n}\r\n\r\nexport interface InventoryAdjustment {\r\n  id: number;\r\n  product_id: number;\r\n  product: Product;\r\n  adjustment: number;\r\n  reason: string;\r\n  adjusted_by: string;\r\n  date_adjusted: string;\r\n}\r\n\r\n// Form Types\r\nexport interface CreateSupplierData {\r\n  name: string;\r\n  address: string;\r\n  province: string;\r\n  contact_person: string;\r\n  phone: string;\r\n  email?: string;\r\n  bir_tin: string;\r\n  is_active: boolean;\r\n}\r\n\r\nexport interface CreateOrderData {\r\n  supplier_id: number;\r\n  delivery_address: string;\r\n  notes?: string;\r\n  items: {\r\n    product_id: number;\r\n    quantity: number;\r\n    unit_price: number;\r\n  }[];\r\n}\r\n\r\nexport interface CreateTransactionData {\r\n  sender: string;\r\n  recipient: string;\r\n  action: string;\r\n  data?: any;\r\n}\r\n\r\n// ===== SETTINGS TYPES =====\r\nexport interface SystemSettings {\r\n  company_name: string;\r\n  company_address: string;\r\n  company_phone: string;\r\n  company_email: string;\r\n  bir_tin: string;\r\n  system_language: string;\r\n  timezone: string;\r\n  currency: string;\r\n  date_format: string;\r\n  notifications_enabled: boolean;\r\n  email_notifications: boolean;\r\n  audit_logging: boolean;\r\n  maintenance_mode: boolean;\r\n  updated_at: string;\r\n  updated_by: string;\r\n}\r\n\r\nexport interface UserPreferences {\r\n  user_id: number;\r\n  language: string;\r\n  theme: 'light' | 'dark' | 'auto';\r\n  email_notifications: boolean;\r\n  order_updates: boolean;\r\n  system_alerts: boolean;\r\n  dashboard_layout: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface UpdateSystemSettingsData {\r\n  company_name?: string;\r\n  company_address?: string;\r\n  company_phone?: string;\r\n  company_email?: string;\r\n  bir_tin?: string;\r\n  system_language?: string;\r\n  timezone?: string;\r\n  currency?: string;\r\n  date_format?: string;\r\n  notifications_enabled?: boolean;\r\n  email_notifications?: boolean;\r\n  audit_logging?: boolean;\r\n  maintenance_mode?: boolean;\r\n}\r\n\r\nexport interface UpdateUserPreferencesData {\r\n  language?: string;\r\n  theme?: 'light' | 'dark' | 'auto';\r\n  email_notifications?: boolean;\r\n  order_updates?: boolean;\r\n  system_alerts?: boolean;\r\n  dashboard_layout?: string;\r\n}\r\n\r\n\r\n\r\n// ===== API SERVICE =====\r\n\r\nexport const apiService = {\r\n  // ===== AUTHENTICATION =====\r\n  login: async (credentials: { username: string; password: string }) => {\r\n    try {\r\n      const response = await api.post('/api/auth/login', credentials);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  logout: async () => {\r\n    try {\r\n      const response = await api.post('/api/auth/logout');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Logout API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  getCurrentUser: async (): Promise<User> => {\r\n    try {\r\n      const response = await api.get('/api/auth/me');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get current user API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // ===== DASHBOARD =====\r\n  getDashboardStats: async (): Promise<DashboardStats> => {\r\n    const response = await api.get('/api/stats');\r\n    return response.data;\r\n  },\r\n  \r\n  getChain: async (): Promise<DashboardStats> => {\r\n    const response = await api.get('/chain');\r\n    return response.data;\r\n  },\r\n\r\n  // ===== BLOCKCHAIN =====\r\n  getBlockchain: async (): Promise<Chain> => {\r\n    const response = await api.get('/chain');\r\n    return response.data;\r\n  },\r\n\r\n  getBlock: async (index: number): Promise<Block> => {\r\n    const response = await api.get(`/chain/block/${index}`);\r\n    return response.data;\r\n  },\r\n\r\n  createTransaction: async (data: CreateTransactionData): Promise<Transaction> => {\r\n    const response = await api.post('/transactions/new', data);\r\n    return response.data;\r\n  },\r\n\r\n  mineBlock: async (): Promise<Block> => {\r\n    const response = await api.get('/mine');\r\n    return response.data;\r\n  },\r\n\r\n  // ===== PEERS =====\r\n  getPeers: async (): Promise<Peer[]> => {\r\n    const response = await api.get('/peers');\r\n    return response.data;\r\n  },\r\n\r\n  addPeer: async (url: string): Promise<Peer> => {\r\n    const response = await api.post('/add_peer', { url });\r\n    return response.data;\r\n  },\r\n\r\n  // ===== SUPPLIERS =====\r\n  getSuppliers: async (): Promise<Supplier[]> => {\r\n    const response = await api.get('/api/suppliers');\r\n    return response.data;\r\n  },\r\n\r\n  getSupplier: async (id: number): Promise<Supplier> => {\r\n    const response = await api.get(`/api/suppliers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createSupplier: async (data: CreateSupplierData): Promise<Supplier> => {\r\n    const response = await api.post('/api/suppliers', data);\r\n    return response.data;\r\n  },\r\n\r\n  updateSupplier: async (id: number, data: Partial<CreateSupplierData>): Promise<Supplier> => {\r\n    const response = await api.put(`/api/suppliers/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  deleteSupplier: async (id: number): Promise<void> => {\r\n    const response = await api.delete(`/api/suppliers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // ===== PURCHASE ORDERS =====\r\n  getOrders: async (): Promise<PurchaseOrder[]> => {\r\n    const response = await api.get('/api/orders');\r\n    return response.data;\r\n  },\r\n\r\n  getOrder: async (id: number): Promise<PurchaseOrder> => {\r\n    const response = await api.get(`/api/orders/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createOrder: async (data: CreateOrderData): Promise<PurchaseOrder> => {\r\n    const response = await api.post('/api/orders', data);\r\n    return response.data;\r\n  },\r\n\r\n  updateOrder: async (id: number, data: Partial<CreateOrderData>): Promise<PurchaseOrder> => {\r\n    const response = await api.put(`/api/orders/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  deleteOrder: async (id: number): Promise<void> => {\r\n    const response = await api.delete(`/api/orders/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  approveOrder: async (id: number): Promise<PurchaseOrder> => {\r\n    const response = await api.post(`/api/orders/${id}/approve`);\r\n    return response.data;\r\n  },\r\n\r\n  // ===== INVENTORY =====\r\n  getInventory: async (): Promise<Inventory[]> => {\r\n    const response = await api.get('/api/inventory');\r\n    return response.data;\r\n  },\r\n\r\n  getInventoryItem: async (id: number): Promise<Inventory> => {\r\n    const response = await api.get(`/api/inventory/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  adjustInventory: async (data: { product_id: number; adjustment: number; reason: string }): Promise<InventoryAdjustment> => {\r\n    const response = await api.post('/api/inventory/adjust', data);\r\n    return response.data;\r\n  },\r\n\r\n  // ===== PRODUCTS =====\r\n  getProducts: async (): Promise<Product[]> => {\r\n    const response = await api.get('/api/products');\r\n    return response.data;\r\n  },\r\n\r\n  getProduct: async (id: number): Promise<Product> => {\r\n    const response = await api.get(`/api/products/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createProduct: async (data: Omit<Product, 'id'>): Promise<Product> => {\r\n    const response = await api.post('/api/products', data);\r\n    return response.data;\r\n  },\r\n\r\n  updateProduct: async (id: number, data: Partial<Product>): Promise<Product> => {\r\n    const response = await api.put(`/api/products/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  deleteProduct: async (id: number): Promise<void> => {\r\n    const response = await api.delete(`/api/products/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // ===== USER MANAGEMENT =====\r\n  getUsers: async (): Promise<User[]> => {\r\n    const response = await api.get('/api/users');\r\n    return response.data;\r\n  },\r\n\r\n  getUser: async (id: number): Promise<User> => {\r\n    const response = await api.get(`/api/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createUser: async (data: CreateUserData): Promise<User> => {\r\n    const response = await api.post('/api/users', data);\r\n    return response.data;\r\n  },\r\n\r\n  updateUser: async (id: number, data: Partial<CreateUserData>): Promise<User> => {\r\n    const response = await api.put(`/api/users/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  updateUserPassword: async (id: number, password: string): Promise<{ message: string }> => {\r\n    const response = await api.put(`/api/users/${id}/password`, { password });\r\n    return response.data;\r\n  },\r\n\r\n  deleteUser: async (id: number): Promise<void> => {\r\n    const response = await api.delete(`/api/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  getRoles: async (): Promise<{ roles: string[]; descriptions: Record<string, string> }> => {\r\n    const response = await api.get('/api/roles');\r\n    return response.data;\r\n  },\r\n\r\n  // ===== SETTINGS =====\r\n  getSystemSettings: async (): Promise<SystemSettings> => {\r\n    const response = await api.get('/api/settings/system');\r\n    return response.data;\r\n  },\r\n\r\n  updateSystemSettings: async (data: UpdateSystemSettingsData): Promise<SystemSettings> => {\r\n    const response = await api.put('/api/settings/system', data);\r\n    return response.data;\r\n  },\r\n\r\n  getUserPreferences: async (): Promise<UserPreferences> => {\r\n    const response = await api.get('/api/settings/preferences');\r\n    return response.data;\r\n  },\r\n\r\n  updateUserPreferences: async (data: UpdateUserPreferencesData): Promise<UserPreferences> => {\r\n    const response = await api.put('/api/settings/preferences', data);\r\n    return response.data;\r\n  },\r\n\r\n  getSystemInfo: async (): Promise<{\r\n    version: string;\r\n    environment: string;\r\n    database: string;\r\n    uptime: number;\r\n    last_backup: string;\r\n  }> => {\r\n    const response = await api.get('/api/settings/system-info');\r\n    return response.data;\r\n  },\r\n\r\n  exportSystemData: async (): Promise<{ download_url: string }> => {\r\n    const response = await api.post('/api/settings/export');\r\n    return response.data;\r\n  },\r\n\r\n  importSystemData: async (file: File): Promise<{ message: string; imported_count: number }> => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const response = await api.post('/api/settings/import', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}