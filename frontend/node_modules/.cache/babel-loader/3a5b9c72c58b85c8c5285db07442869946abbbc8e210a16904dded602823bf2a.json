{"ast":null,"code":"/**\r\n * Utility to hide zero notification badges throughout the application\r\n * This targets \"0\" elements that appear to be notification counts\r\n */\n\nexport const hideZeroNotifications = () => {\n  // Target all elements that might contain \"0\"\n  const allElements = document.querySelectorAll('*');\n  allElements.forEach(element => {\n    if (element instanceof HTMLElement) {\n      var _element$textContent;\n      const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n\n      // Check if this element contains only \"0\" and appears to be a notification badge\n      if (text === '0' && element.children.length === 0) {\n        // Check if it's positioned near navigation items or looks like a notification\n        const rect = element.getBoundingClientRect();\n        const isNearNav = rect.top < 100; // If it's in the top area where nav is\n\n        if (isNearNav || element.classList.contains('badge') || element.classList.contains('notification') || element.getAttribute('data-count') === '0' || element.style.position === 'absolute' || element.style.position === 'fixed') {\n          element.style.display = 'none';\n          element.style.visibility = 'hidden';\n          element.style.opacity = '0';\n          element.style.pointerEvents = 'none';\n        }\n      }\n    }\n  });\n\n  // Specifically target \"0\" elements that are direct children of nav containers\n  const navContainers = document.querySelectorAll('.navbar-nav, .nav, [role=\"navigation\"]');\n  navContainers.forEach(container => {\n    const children = Array.from(container.children);\n    children.forEach(child => {\n      if (child instanceof HTMLElement) {\n        var _child$textContent;\n        // Check if this child contains only \"0\"\n        if (((_child$textContent = child.textContent) === null || _child$textContent === void 0 ? void 0 : _child$textContent.trim()) === '0' && child.children.length === 0) {\n          child.style.display = 'none';\n          child.style.visibility = 'hidden';\n          child.style.opacity = '0';\n          child.style.pointerEvents = 'none';\n        }\n\n        // Check for \"0\" elements within this child\n        const zeroElements = child.querySelectorAll('*');\n        zeroElements.forEach(element => {\n          var _element$textContent2;\n          if (element instanceof HTMLElement && ((_element$textContent2 = element.textContent) === null || _element$textContent2 === void 0 ? void 0 : _element$textContent2.trim()) === '0') {\n            element.style.display = 'none';\n            element.style.visibility = 'hidden';\n            element.style.opacity = '0';\n            element.style.pointerEvents = 'none';\n          }\n        });\n      }\n    });\n  });\n\n  // Additional check for any remaining \"0\" elements in the header area\n  const header = document.querySelector('header');\n  if (header) {\n    const headerZeros = header.querySelectorAll('*');\n    headerZeros.forEach(element => {\n      var _element$textContent3;\n      if (element instanceof HTMLElement && ((_element$textContent3 = element.textContent) === null || _element$textContent3 === void 0 ? void 0 : _element$textContent3.trim()) === '0') {\n        element.style.display = 'none';\n        element.style.visibility = 'hidden';\n        element.style.opacity = '0';\n        element.style.pointerEvents = 'none';\n      }\n    });\n  }\n};\n\n/**\r\n * Set up automatic hiding of zero notifications\r\n * This should be called once when the app initializes\r\n */\nexport const setupZeroNotificationHiding = () => {\n  // Run immediately\n  hideZeroNotifications();\n\n  // Run with delays to catch dynamic content\n  const timers = [setTimeout(hideZeroNotifications, 50), setTimeout(hideZeroNotifications, 200), setTimeout(hideZeroNotifications, 500), setTimeout(hideZeroNotifications, 1000), setTimeout(hideZeroNotifications, 2000)];\n\n  // Set up mutation observer to catch DOM changes\n  const observer = new MutationObserver(hideZeroNotifications);\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: ['style', 'class']\n  });\n\n  // Return cleanup function\n  return () => {\n    timers.forEach(timer => clearTimeout(timer));\n    observer.disconnect();\n  };\n};\n\n/**\r\n * Hide zero notifications and set up periodic checking\r\n * This is useful for components that need to ensure zeros are hidden\r\n */\nexport const hideZerosWithPeriodicCheck = () => {\n  hideZeroNotifications();\n\n  // Set up periodic checking\n  const interval = setInterval(hideZeroNotifications, 1000);\n  return () => clearInterval(interval);\n};\nexport default hideZeroNotifications;","map":{"version":3,"names":["hideZeroNotifications","allElements","document","querySelectorAll","forEach","element","HTMLElement","_element$textContent","text","textContent","trim","children","length","rect","getBoundingClientRect","isNearNav","top","classList","contains","getAttribute","style","position","display","visibility","opacity","pointerEvents","navContainers","container","Array","from","child","_child$textContent","zeroElements","_element$textContent2","header","querySelector","headerZeros","_element$textContent3","setupZeroNotificationHiding","timers","setTimeout","observer","MutationObserver","observe","body","childList","subtree","attributes","attributeFilter","timer","clearTimeout","disconnect","hideZerosWithPeriodicCheck","interval","setInterval","clearInterval"],"sources":["F:/Project/BLOCKCHAIN/frontend/src/utils/zeroNotificationHider.ts"],"sourcesContent":["/**\r\n * Utility to hide zero notification badges throughout the application\r\n * This targets \"0\" elements that appear to be notification counts\r\n */\r\n\r\nexport const hideZeroNotifications = () => {\r\n  // Target all elements that might contain \"0\"\r\n  const allElements = document.querySelectorAll('*');\r\n  \r\n  allElements.forEach(element => {\r\n    if (element instanceof HTMLElement) {\r\n      const text = element.textContent?.trim();\r\n      \r\n      // Check if this element contains only \"0\" and appears to be a notification badge\r\n      if (text === '0' && element.children.length === 0) {\r\n        // Check if it's positioned near navigation items or looks like a notification\r\n        const rect = element.getBoundingClientRect();\r\n        const isNearNav = rect.top < 100; // If it's in the top area where nav is\r\n        \r\n        if (isNearNav || \r\n            element.classList.contains('badge') ||\r\n            element.classList.contains('notification') ||\r\n            element.getAttribute('data-count') === '0' ||\r\n            element.style.position === 'absolute' ||\r\n            element.style.position === 'fixed') {\r\n          element.style.display = 'none';\r\n          element.style.visibility = 'hidden';\r\n          element.style.opacity = '0';\r\n          element.style.pointerEvents = 'none';\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Specifically target \"0\" elements that are direct children of nav containers\r\n  const navContainers = document.querySelectorAll('.navbar-nav, .nav, [role=\"navigation\"]');\r\n  navContainers.forEach(container => {\r\n    const children = Array.from(container.children);\r\n    children.forEach((child) => {\r\n      if (child instanceof HTMLElement) {\r\n        // Check if this child contains only \"0\"\r\n        if (child.textContent?.trim() === '0' && child.children.length === 0) {\r\n          child.style.display = 'none';\r\n          child.style.visibility = 'hidden';\r\n          child.style.opacity = '0';\r\n          child.style.pointerEvents = 'none';\r\n        }\r\n        \r\n        // Check for \"0\" elements within this child\r\n        const zeroElements = child.querySelectorAll('*');\r\n        zeroElements.forEach(element => {\r\n          if (element instanceof HTMLElement && element.textContent?.trim() === '0') {\r\n            element.style.display = 'none';\r\n            element.style.visibility = 'hidden';\r\n            element.style.opacity = '0';\r\n            element.style.pointerEvents = 'none';\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Additional check for any remaining \"0\" elements in the header area\r\n  const header = document.querySelector('header');\r\n  if (header) {\r\n    const headerZeros = header.querySelectorAll('*');\r\n    headerZeros.forEach(element => {\r\n      if (element instanceof HTMLElement && element.textContent?.trim() === '0') {\r\n        element.style.display = 'none';\r\n        element.style.visibility = 'hidden';\r\n        element.style.opacity = '0';\r\n        element.style.pointerEvents = 'none';\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Set up automatic hiding of zero notifications\r\n * This should be called once when the app initializes\r\n */\r\nexport const setupZeroNotificationHiding = () => {\r\n  // Run immediately\r\n  hideZeroNotifications();\r\n  \r\n  // Run with delays to catch dynamic content\r\n  const timers = [\r\n    setTimeout(hideZeroNotifications, 50),\r\n    setTimeout(hideZeroNotifications, 200),\r\n    setTimeout(hideZeroNotifications, 500),\r\n    setTimeout(hideZeroNotifications, 1000),\r\n    setTimeout(hideZeroNotifications, 2000)\r\n  ];\r\n  \r\n  // Set up mutation observer to catch DOM changes\r\n  const observer = new MutationObserver(hideZeroNotifications);\r\n  observer.observe(document.body, { \r\n    childList: true, \r\n    subtree: true,\r\n    attributes: true,\r\n    attributeFilter: ['style', 'class']\r\n  });\r\n  \r\n  // Return cleanup function\r\n  return () => {\r\n    timers.forEach(timer => clearTimeout(timer));\r\n    observer.disconnect();\r\n  };\r\n};\r\n\r\n/**\r\n * Hide zero notifications and set up periodic checking\r\n * This is useful for components that need to ensure zeros are hidden\r\n */\r\nexport const hideZerosWithPeriodicCheck = () => {\r\n  hideZeroNotifications();\r\n  \r\n  // Set up periodic checking\r\n  const interval = setInterval(hideZeroNotifications, 1000);\r\n  \r\n  return () => clearInterval(interval);\r\n};\r\n\r\nexport default hideZeroNotifications;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}